CREATE TRIGGER clear_mark_requirement BEFORE INSERT
ON mark_requirement
BEGIN
	DELETE FROM mark_requirement WHERE NEW.requirement_name=requirement_name AND NEW.expert_id=expert_id;
END;

INSERT INTO requirements VALUES ("competence", "Оценка комп", "Оценка компетентности", 0.2);
INSERT INTO requirements VALUES ("conformity", "Оценка конформизма", "Оценка конформизма", 0.15);

INSERT INTO task_type VALUES ("question_variant", "Один вопрос-один ответ", "Выбор одного ответа");
INSERT INTO task_type VALUES ("check_multiple", "Чекбокс", "Выбор нескольких ответов");
INSERT INTO task_type VALUES ("question_input", "Ввод", "Ввод ответа");
INSERT INTO task_type VALUES ("question_combobox", "Комбобокс", "Выбор комбобокс");

INSERT INTO  tasks VALUES (1, "competence", "question-variant", "Тестирование белого ящика", "Тестирование белого ящика это");
INSERT INTO  tasks VALUES (2, "competence", "check_multiple", "Тестирование белого ящикаsdsd", "Тестирование белого ящика это");

INSERT INTO  tasks VALUES (3, "conformity", "question-variant", "Тестирование черного ящика", "Тестирование белого ящика это");
INSERT INTO  tasks VALUES (4, "conformity", "check_multiple", "Тестирование черного ящика", "Тестирование белого ящика это");


INSERT INTO solutions VALUES (1, 1, 2.0, "тестирование белого ящика проводится это
стратегия тестирования, основанная исключительно на требованиях и спецификациях.
Это тестирование не имеет доступа к исходному коду и
тестирует только входы и выходы программы, не затрагивая внутреннее устройство.", "");

INSERT INTO solutions VALUES (2, 1, 1.0, "Тестирование белого ящика
(также известное как тестирование юнита) проводится на уровне исходного кода.
Оно проверяет, что каждая функция или
модуль программы работает так, как задумывалось, и выполняет свои ожидаемые операции", "");

INSERT INTO solutions VALUES (3, 1, 0.0, "Тестирование белого ящика является комбинацией
тестирования белого и черного ящика.
Это тестирование дает доступ к некоторым внутренним частям программы, таким как данные или переменные,
но не имеет полного доступа к исходному коду. Целью тестирования белого ящика является проверка того,
 как программа обрабатывает данные и взаимодействует с другими частями программы",  "");

INSERT INTO solutions VALUES (4, 2, 2.0, "тестирование белого ящика проводится это
стратегия тестирования, основанная исключительно на требованиях и спецификациях.
Это тестирование не имеет доступа к исходному коду и
тестирует только входы и выходы программы, не затрагивая внутреннее устройство.",  "");

INSERT INTO solutions VALUES (5, 2, 1.0, "Тестирование белого ящика
(также известное как тестирование юнита) проводится на уровне исходного кода.
Оно проверяет, что каждая функция или
модуль программы работает так, как задумывалось, и выполняет свои ожидаемые операции",  "");

INSERT INTO solutions (task_id, mark, text, valid_answer) VALUES (2, 0.0, "Тестирование белого ящика является комбинацией
тестирования белого и черного ящика.
Это тестирование дает доступ к некоторым внутренним частям программы, таким как данные или переменные,
но не имеет полного доступа к исходному коду. Целью тестирования белого ящика является проверка того,
 как программа обрабатывает данные и взаимодействует с другими частями программы",  "");

INSERT INTO solutions (task_id, mark, text, valid_answer) VALUES (3, 0.4, "тестирование белого ящика проводится это
стратегия тестирования, основанная исключительно на требованиях и спецификациях.
Это тестирование не имеет доступа к исходному коду и
тестирует только входы и выходы программы, не затрагивая внутреннее устройство.", "");

INSERT INTO solutions (task_id, mark, text, valid_answer) VALUES (3, 0.5, "Тестирование белого ящика
(также известное как тестирование юнита) проводится на уровне исходного кода.
Оно проверяет, что каждая функция или
модуль программы работает так, как задумывалось, и выполняет свои ожидаемые операции", "");

INSERT INTO solutions (task_id, mark, text, valid_answer) VALUES (3, 0.0, "Тестирование белого ящика является комбинацией
тестирования белого и черного ящика.
Это тестирование дает доступ к некоторым внутренним частям программы, таким как данные или переменные,
но не имеет полного доступа к исходному коду. Целью тестирования белого ящика является проверка того,
 как программа обрабатывает данные и взаимодействует с другими частями программы",  "");

INSERT INTO solutions (task_id, mark, text, valid_answer) VALUES (3, -0.15, "тестирование белого ящика проводится это
стратегия тестирования, основанная исключительно на требованиях и спецификациях.
Это тестирование не имеет доступа к исходному коду и
тестирует только входы и выходы программы, не затрагивая внутреннее устройство.",  "");

INSERT INTO solutions (task_id, mark, text, valid_answer) VALUES (4, 0.2, "Тестирование белого ящика
(также известное как тестирование юнита) проводится на уровне исходного кода.
Оно проверяет, что каждая функция или
модуль программы работает так, как задумывалось, и выполняет свои ожидаемые операции",  "");

INSERT INTO solutions (task_id, mark, text, valid_answer) VALUES (4, -0.14, "Тестирование белого ящика является комбинацией
тестирования белого и черного ящика.
Это тестирование дает доступ к некоторым внутренним частям программы, таким как данные или переменные,
но не имеет полного доступа к исходному коду. Целью тестирования белого ящика является проверка того,
 как программа обрабатывает данные и взаимодействует с другими частями программы",  "");

 INSERT INTO solutions(task_id, mark, text, valid_answer) VALUES (4, 0.25, "Тестирование белого ящика является комбинацией
тестирования белого и черного ящика.
Это тестирование дает доступ к некоторым внутренним частям программы, таким как данные или переменные,
но не имеет полного доступа к исходному коду. Целью тестирования белого ящика является проверка того,
 как программа обрабатывает данные и взаимодействует с другими частями программы",  "");